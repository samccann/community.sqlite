---
# Family Database Creation Playbook
# Creates an SQLite database called 'family' with a siblings table containing 6 family members
#
# Usage:
#   For local development (from within collection):
#     ansible-playbook family_database.yml
#   
#   With installed collection:
#     ansible-playbook family_database.yml -e use_fqcn=true

- name: Create Family Database with Siblings Table
  hosts: localhost
  gather_facts: false
  vars:
    database_path: "./family.db"
    backup_path: "./family_backup.db"
    use_fqcn: false  # Set to true when using installed collection
    siblings_data:
      - { name: "David", birth_order: 1, age: 65, favorite_color: "Blue" }
      - { name: "Caryl", birth_order: 2, age: 63, favorite_color: "Green" }
      - { name: "Joyce", birth_order: 3, age: 61, favorite_color: "Purple" }
      - { name: "Tom", birth_order: 4, age: 59, favorite_color: "Red" }
      - { name: "Linda", birth_order: 5, age: 57, favorite_color: "Yellow" }
      - { name: "Sharon", birth_order: 6, age: 55, favorite_color: "Pink" }

  tasks:
    - name: Clean up existing database for fresh start
      file:
        path: "{{ database_path }}"
        state: absent

    - name: Create family SQLite database
      sqlite_db:
        path: "{{ database_path }}"
        state: present
        mode: '0644'
      register: db_creation
      when: not use_fqcn

    - name: Create family SQLite database (FQCN)
      community.sqlite.sqlite_db:
        path: "{{ database_path }}"
        state: present
        mode: '0644'
      register: db_creation
      when: use_fqcn

    - name: Display database creation result
      debug:
        msg: "‚úÖ Family database created at {{ database_path }} ({{ db_creation.size }} bytes)"

    - name: Create siblings table with comprehensive schema
      sqlite_table:
        db: "{{ database_path }}"
        name: siblings
        state: present
        columns:
          - name: id
            type: INTEGER
            constraints: PRIMARY KEY AUTOINCREMENT
          - name: name
            type: TEXT
            constraints: NOT NULL UNIQUE
          - name: birth_order
            type: INTEGER
            constraints: NOT NULL
          - name: age
            type: INTEGER
          - name: favorite_color
            type: TEXT
          - name: created_at
            type: TIMESTAMP
            constraints: DEFAULT CURRENT_TIMESTAMP
      register: table_creation
      when: not use_fqcn

    - name: Create siblings table with comprehensive schema (FQCN)
      community.sqlite.sqlite_table:
        db: "{{ database_path }}"
        name: siblings
        state: present
        columns:
          - name: id
            type: INTEGER
            constraints: PRIMARY KEY AUTOINCREMENT
          - name: name
            type: TEXT
            constraints: NOT NULL UNIQUE
          - name: birth_order
            type: INTEGER
            constraints: NOT NULL
          - name: age
            type: INTEGER
          - name: favorite_color
            type: TEXT
          - name: created_at
            type: TIMESTAMP
            constraints: DEFAULT CURRENT_TIMESTAMP
      register: table_creation
      when: use_fqcn

    - name: Display table creation result
      debug:
        msg: "‚úÖ Siblings table {{ 'created' if table_creation.changed else 'already exists' }}"

    - name: Insert all sibling records
      sqlite_query:
        db: "{{ database_path }}"
        query: "INSERT INTO siblings (name, birth_order, age, favorite_color) VALUES (?, ?, ?, ?)"
        parameters: 
          - "{{ item.name }}"
          - "{{ item.birth_order }}"
          - "{{ item.age }}"
          - "{{ item.favorite_color }}"
        transaction: true
      loop: "{{ siblings_data }}"
      register: insert_results
      when: not use_fqcn

    - name: Insert all sibling records (FQCN)
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: "INSERT INTO siblings (name, birth_order, age, favorite_color) VALUES (?, ?, ?, ?)"
        parameters: 
          - "{{ item.name }}"
          - "{{ item.birth_order }}"
          - "{{ item.age }}"
          - "{{ item.favorite_color }}"
        transaction: true
      loop: "{{ siblings_data }}"
      register: insert_results
      when: use_fqcn

    - name: Display insertion summary
      debug:
        msg: "‚úÖ Successfully inserted {{ insert_results.results | selectattr('rowcount', 'equalto', 1) | list | length }} siblings"

    - name: Get total sibling count
      sqlite_query:
        db: "{{ database_path }}"
        query: "SELECT COUNT(*) as total FROM siblings"
        fetch: one
      register: count_result
      when: not use_fqcn

    - name: Get total sibling count (FQCN)
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: "SELECT COUNT(*) as total FROM siblings"
        fetch: one
      register: count_result
      when: use_fqcn

    - name: Display sibling count
      debug:
        msg: "üë• Total siblings in family database: {{ count_result.rows[0][0] }}"

    - name: Retrieve all sibling information
      sqlite_query:
        db: "{{ database_path }}"
        query: |
          SELECT 
            id, 
            name, 
            birth_order, 
            age, 
            favorite_color,
            datetime(created_at) as created_timestamp
          FROM siblings 
          ORDER BY birth_order
        fetch: all
      register: all_siblings
      when: not use_fqcn

    - name: Retrieve all sibling information (FQCN)
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: |
          SELECT 
            id, 
            name, 
            birth_order, 
            age, 
            favorite_color,
            datetime(created_at) as created_timestamp
          FROM siblings 
          ORDER BY birth_order
        fetch: all
      register: all_siblings
      when: use_fqcn

    - name: Display complete family information
      debug:
        msg: |
          üë• FAMILY SIBLINGS DATABASE:
          {% for sibling in all_siblings.rows %}
          {{ sibling[2] }}. {{ sibling[1] }} ({{ sibling[3] }} years old, loves {{ sibling[4] }})
          {% endfor %}

    - name: Create backup of family database
      sqlite_backup:
        src: "{{ database_path }}"
        dest: "{{ backup_path }}"
        operation: backup
        verify_backup: true
        overwrite: true
      register: backup_result
      when: not use_fqcn

    - name: Create backup of family database (FQCN)
      community.sqlite.sqlite_backup:
        src: "{{ database_path }}"
        dest: "{{ backup_path }}"
        operation: backup
        verify_backup: true
        overwrite: true
      register: backup_result
      when: use_fqcn

    - name: Display final summary
      debug:
        msg: |
          
          üéâ FAMILY DATABASE CREATED SUCCESSFULLY! üéâ
          
          üìÅ Database: {{ database_path }}
          üíæ Backup: {{ backup_path }}
          üë• Siblings: {{ count_result.rows[0][0] }}
          üìä Database size: {{ db_creation.size }} bytes
          ‚ö° Backup time: {{ backup_result.backup_time }}s
          ‚úÖ Backup verified: {{ backup_result.verified }}
          
          üîç Quick verification commands:
          sqlite3 {{ database_path }} "SELECT birth_order, name, age, favorite_color FROM siblings ORDER BY birth_order;"
          sqlite3 {{ database_path }} ".schema siblings"
          sqlite3 {{ database_path }} ".tables" 