---
- name: Create Complete Family Database with Siblings
  hosts: localhost
  gather_facts: false
  vars:
    database_path: "./family.db"
    backup_path: "./family_backup.db"
    siblings_data:
      - { name: "David", birth_order: 1 }
      - { name: "Caryl", birth_order: 2 }
      - { name: "Joyce", birth_order: 3 }
      - { name: "Tom", birth_order: 4 }
      - { name: "Linda", birth_order: 5 }
      - { name: "Sharon", birth_order: 6 }

  tasks:
    - name: Remove existing database for clean start
      file:
        path: "{{ database_path }}"
        state: absent

    - name: Create family database
      community.sqlite.sqlite_db:
        path: "{{ database_path }}"
        state: present
        mode: '0644'
      register: db_creation

    - name: Display database creation info
      debug:
        msg: "‚úÖ Database created at {{ database_path }} ({{ db_creation.size }} bytes)"

    - name: Create siblings table with comprehensive schema
      community.sqlite.sqlite_table:
        db: "{{ database_path }}"
        name: siblings
        state: present
        columns:
          - name: id
            type: INTEGER
            constraints: PRIMARY KEY AUTOINCREMENT
          - name: name
            type: TEXT
            constraints: NOT NULL UNIQUE
          - name: birth_order
            type: INTEGER
            constraints: NOT NULL
          - name: age
            type: INTEGER
          - name: favorite_color
            type: TEXT
          - name: created_at
            type: TIMESTAMP
            constraints: DEFAULT CURRENT_TIMESTAMP
        if_not_exists: true
      register: table_creation

    - name: Display table creation result
      debug:
        msg: "‚úÖ Siblings table {{ 'created' if table_creation.changed else 'already exists' }}"

    - name: Insert all siblings using loop
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: "INSERT INTO siblings (name, birth_order) VALUES (?, ?)"
        parameters: ["{{ item.name }}", "{{ item.birth_order }}"]
        transaction: true
      loop: "{{ siblings_data }}"
      register: insert_results

    - name: Display insertion summary
      debug:
        msg: "‚úÖ Inserted {{ insert_results.results | selectattr('rowcount', 'equalto', 1) | list | length }} siblings successfully"

    - name: Update siblings with additional information
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: "UPDATE siblings SET age = ?, favorite_color = ? WHERE name = ?"
        parameters: ["{{ item.age }}", "{{ item.color }}", "{{ item.name }}"]
      loop:
        - { name: "David", age: 65, color: "Blue" }
        - { name: "Caryl", age: 63, color: "Green" }
        - { name: "Joyce", age: 61, color: "Purple" }
        - { name: "Tom", age: 59, color: "Red" }
        - { name: "Linda", age: 57, color: "Yellow" }
        - { name: "Sharon", age: 55, color: "Pink" }

    - name: Get total sibling count
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: "SELECT COUNT(*) as total FROM siblings"
        fetch: one
      register: count_query

    - name: Display sibling count
      debug:
        msg: "üìä Total siblings in family: {{ count_query.rows[0][0] }}"

    - name: Retrieve all sibling information
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: |
          SELECT 
            id, 
            name, 
            birth_order, 
            age, 
            favorite_color,
            created_at
          FROM siblings 
          ORDER BY birth_order
        fetch: all
      register: all_siblings

    - name: Display complete sibling information
      debug:
        msg: |
          üë• FAMILY SIBLINGS:
          {% for sibling in all_siblings.rows %}
          {{ sibling[2] }}. {{ sibling[1] }} (Age: {{ sibling[3] }}, Favorite Color: {{ sibling[4] }})
          {% endfor %}

    - name: Get table information and statistics
      community.sqlite.sqlite_table:
        db: "{{ database_path }}"
        name: siblings
        state: present
        gather_info: true
      register: table_info

    - name: Display table schema information
      debug:
        msg: |
          üìã TABLE INFORMATION:
          - Table: {{ table_info.table }}
          - Columns: {{ table_info.columns | length }}
          - Total Rows: {{ table_info.row_count }}
          - Schema: {{ table_info.schema }}

    - name: Create database backup
      community.sqlite.sqlite_backup:
        src: "{{ database_path }}"
        dest: "{{ backup_path }}"
        operation: backup
        verify_backup: true
        overwrite: true
      register: backup_result

    - name: Display backup information
      debug:
        msg: |
          üíæ BACKUP COMPLETED:
          - Time taken: {{ backup_result.backup_time }}s
          - Source size: {{ backup_result.src_size }} bytes
          - Backup size: {{ backup_result.dest_size }} bytes
          - Verified: {{ backup_result.verified }}
          - Location: {{ backup_path }}

    - name: Find oldest and youngest siblings
      community.sqlite.sqlite_query:
        db: "{{ database_path }}"
        query: |
          SELECT name, age FROM siblings 
          WHERE age = (SELECT MAX(age) FROM siblings)
          UNION ALL
          SELECT name, age FROM siblings 
          WHERE age = (SELECT MIN(age) FROM siblings)
      register: age_extremes

    - name: Display age information
      debug:
        msg: |
          üë¥üë∂ AGE STATISTICS:
          - Oldest: {{ age_extremes.rows[0][0] }} ({{ age_extremes.rows[0][1] }} years)
          - Youngest: {{ age_extremes.rows[1][0] }} ({{ age_extremes.rows[1][1] }} years)

    - name: Show final summary
      debug:
        msg: |
          
          üéâ FAMILY DATABASE SETUP COMPLETE! üéâ
          
          üìÅ Database: {{ database_path }}
          üíæ Backup: {{ backup_path }}
          üë• Siblings: {{ table_info.row_count }}
          
          üîç Quick verification command:
          sqlite3 {{ database_path }} "SELECT birth_order, name, age, favorite_color FROM siblings ORDER BY birth_order;"
          
          üìä Database size: {{ db_creation.size }} bytes 